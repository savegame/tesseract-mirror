////////////////////////////////////////////////
//
// sky shaders
//
////////////////////////////////////////////////

shader 0 "skybox" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 skymatrix;
    uniform float ldrscale;
    varying vec4 colorscale;
    varying vec2 texcoord0;
    void main(void)
    {
        gl_Position = skymatrix * vvertex;
        texcoord0 = vtexcoord0; 
        colorscale = vec4(ldrscale * vcolor.rgb, vcolor.a);
    }
] [
    uniform sampler2D tex0;
    varying vec4 colorscale;
    varying vec2 texcoord0;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        vec4 color = texture2D(tex0, texcoord0);
        fragcolor = colorscale * color;
    }
]

shader 0 "skyboxoverbright" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 skymatrix;
    uniform float ldrscale;
    varying vec4 colorscale;
    varying vec2 texcoord0;
    void main(void)
    {
        gl_Position = skymatrix * vvertex;
        texcoord0 = vtexcoord0; 
        colorscale = vec4(ldrscale * vcolor.rgb, vcolor.a);
    }
] [
    uniform sampler2D tex0;
    uniform vec3 overbrightparams;
    uniform float ldrscale;
    varying vec4 colorscale;
    varying vec2 texcoord0;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        vec4 color = texture2D(tex0, texcoord0);
        float lum = dot(vec3(@lumweights), color.rgb);
        float overbright = mix(overbrightparams.x, overbrightparams.y, clamp(lum - overbrightparams.z, 0.0, 1.0));
        color.rgb *= overbright;
        fragcolor = colorscale * color;
    }
]

shader 0 "atmosphere" [
    attribute vec4 vvertex;
    uniform mat4 sunmatrix;
    varying vec3 camvec;
    void main(void)
    {
        gl_Position = vvertex;

        vec4 p = sunmatrix * vvertex;
        camvec = p.xyz / p.w;
    }
] [
    uniform vec4 sunlight;
    uniform vec3 sundir;
    uniform vec2 sundiskparams;
    uniform vec2 opticaldepthparams;
    uniform vec3 mie;
    uniform vec3 betar, betam, betarm;
    uniform vec2 hdrgamma;
    varying vec3 camvec;
    fragdata(0) vec4 fragcolor;

    vec3 calcextinction(float dist)
    {
        return exp2(-dist * betarm);
    }

    vec3 calcscatter(float costheta)
    {
        float rphase = 1.5 + 0.5*costheta*costheta;
        float mphase = inversesqrt(mie.x + mie.y*min(costheta, mie.z));
        return betar*rphase + betam*mphase*mphase*mphase;
    }

    float opticaldepth(vec3 ray)
    {
        return opticaldepthparams.y * (sqrt(ray.z*ray.z + opticaldepthparams.x) - ray.z);
    }

    void main(void)
    {
        vec3 camdir = normalize(camvec);
        float costheta = dot(camdir, sundir);

        // sun disk
        float edgeoffset = max(1.0 - (1.0 - max(costheta, 0.0)*costheta)*sundiskparams.x, 0.0);
        // limb darken with distance to edge
        vec3 limbdarken = pow(vec3(edgeoffset), vec3(0.397, 0.503, 0.64));
        // lighten edges for corona, but limit it to not interfere with limb darkening
        float corona = min(0.25 + 0.75 * edgeoffset * sundiskparams.y, 1.0);
        corona *= corona;
        corona *= corona;
        corona *= corona;
        // apply limb darkening and corona to clamped sunlight color
        vec3 sundisk = sunlight.rgb * limbdarken * corona;

        // optical depth along view ray
        float raydist = opticaldepth(camdir);

        // extinction of light along view ray
        vec3 extinction = calcextinction(raydist - 1.0);

        // calculate the in-scattering
        vec3 scattering = calcscatter(costheta) * raydist / (raydist - 1.0);

        // combine scattering and extinction, fading out to sundisk
        vec3 inscatter = mix(scattering, sundisk, extinction);

        @(hdrgammaencode inscatter)

        fragcolor = vec4(inscatter, sunlight.a);
    }
]

shader 0 "skyfog" [
    attribute vec4 vvertex, vcolor;
    uniform mat4 skymatrix;
    uniform float ldrscale;
    varying vec4 color;
    void main(void)
    {
        gl_Position = skymatrix * vvertex;
        color = vec4(ldrscale * vcolor.rgb, vcolor.a);
    }
] [
    uniform sampler2D tex0;
    varying vec4 color;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor = color;
    }
]

